'use strict';

exports.__esModule = true;
exports.isCommandRejectableByPageError = isCommandRejectableByPageError;
exports.isVisualManipulationCommand = isVisualManipulationCommand;
exports.isBrowserManipulationCommand = isBrowserManipulationCommand;
exports.isServiceCommand = isServiceCommand;
exports.isExecutableInTopWindowOnly = isExecutableInTopWindowOnly;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isCommandRejectableByPageError(command) {
    return !isObservationCommand(command) && !isBrowserManipulationCommand(command) && !isServiceCommand(command) || isRejectablePrepareBrowserManipulationCommand(command) && !isWindowSwitchingCommand(command);
} // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------


function isObservationCommand(command) {
    return command.type === _type2.default.executeClientFunction || command.type === _type2.default.executeSelector || command.type === _type2.default.wait || command.type === _type2.default.debug;
}

function isWindowSwitchingCommand(command) {
    return command.type === _type2.default.switchToIframe || command.type === _type2.default.switchToMainWindow;
}

function isVisualManipulationCommand(command) {
    return command.type === _type2.default.click || command.type === _type2.default.rightClick || command.type === _type2.default.doubleClick || command.type === _type2.default.hover || command.type === _type2.default.typeText || command.type === _type2.default.drag || command.type === _type2.default.dragToElement || command.type === _type2.default.selectText || command.type === _type2.default.selectTextAreaContent || command.type === _type2.default.selectEditableContent || command.type === _type2.default.pressKey || command.type === _type2.default.navigateTo || command.type === _type2.default.setFilesToUpload || command.type === _type2.default.clearUpload;
}

function isBrowserManipulationCommand(command) {
    return command.type === _type2.default.takeScreenshot || command.type === _type2.default.takeScreenshotOnFail || command.type === _type2.default.resizeWindow || command.type === _type2.default.resizeWindowToFitDevice;
}

function isRejectablePrepareBrowserManipulationCommand(command) {
    return command.type === _type2.default.prepareBrowserManipulation && (command.manipulationCommandType === _type2.default.resizeWindow || command.manipulationCommandType === _type2.default.resizeWindowToFitDevice);
}

function isServicePrepareBrowserManipulationCommand(command) {
    return command.type === _type2.default.prepareBrowserManipulation && command.manipulationCommandType === _type2.default.takeScreenshotOnFail;
}

function isServiceCommand(command) {
    return command.type === _type2.default.testDone || command.type === _type2.default.takeScreenshotOnFail || isServicePrepareBrowserManipulationCommand(command);
}

function isExecutableInTopWindowOnly(command) {
    return command.type === _type2.default.testDone || command.type === _type2.default.debug || command.type === _type2.default.prepareBrowserManipulation || command.type === _type2.default.switchToMainWindow || command.type === _type2.default.setNativeDialogHandler || command.type === _type2.default.getNativeDialogHistory || command.type === _type2.default.setTestSpeed;
}