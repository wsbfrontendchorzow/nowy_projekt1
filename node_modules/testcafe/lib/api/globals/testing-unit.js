'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _handleTagArgs = require('../../utils/handle-tag-args');

var _handleTagArgs2 = _interopRequireDefault(_handleTagArgs);

var _delegatedApi = require('../../utils/delegated-api');

var _typeAssertions = require('../../errors/runtime/type-assertions');

var _testController = require('../test-controller');

var _testController2 = _interopRequireDefault(_testController);

var _testRunTracker = require('../test-run-tracker');

var _testRunTracker2 = _interopRequireDefault(_testRunTracker);

var _processTestFnError = require('../../errors/process-test-fn-error');

var _processTestFnError2 = _interopRequireDefault(_processTestFnError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PROTOCOL_RE = /^(https?|file):\/\//;
var IMPLICIT_PROTOCOL_RE = /^\/\//;

var TestingUnit = function () {
    function TestingUnit(globals) {
        (0, _classCallCheck3.default)(this, TestingUnit);

        this.globals = globals;

        this.name = null;
        this.pageUrl = null;
        this.authCredentials = null;
        this.only = false;
        this.skip = false;

        var unit = this;

        this.apiOrigin = function apiOrigin() {
            return unit._add.apply(unit, arguments);
        };

        (0, _delegatedApi.delegateAPI)(this.apiOrigin, this.constructor.API_LIST, { handler: this });
    }

    TestingUnit.prototype._add = function _add() {
        throw new Error('Not implemented');
    };

    TestingUnit.prototype._only$getter = function _only$getter() {
        this.only = true;

        return this.apiOrigin;
    };

    TestingUnit.prototype._skip$getter = function _skip$getter() {
        this.skip = true;

        return this.apiOrigin;
    };

    TestingUnit.prototype._page$ = function _page$(url) {
        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
        }

        this.pageUrl = (0, _handleTagArgs2.default)(url, rest);

        (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'page', 'The page URL', this.pageUrl);

        if (!PROTOCOL_RE.test(this.pageUrl)) {
            var protocol = IMPLICIT_PROTOCOL_RE.test(this.pageUrl) ? 'http:' : 'http://';

            this.pageUrl = protocol + this.pageUrl;
        }

        return this.apiOrigin;
    };

    TestingUnit.prototype._httpAuth$ = function _httpAuth$(credentials) {
        (0, _typeAssertions.assertType)(_typeAssertions.is.nonNullObject, 'httpAuth', 'credentials', credentials);
        (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'httpAuth', 'credentials.username', credentials.username);
        (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'httpAuth', 'credentials.password', credentials.password);

        if (credentials.domain) (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'httpAuth', 'credentials.domain', credentials.domain);
        if (credentials.workstation) (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'httpAuth', 'credentials.workstation', credentials.workstation);

        this.authCredentials = credentials;

        return this.apiOrigin;
    };

    TestingUnit._wrapTestFunction = function _wrapTestFunction(fn) {
        var _this = this;

        return function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(testRun) {
                var result, markeredfn;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                result = null;
                                markeredfn = _testRunTracker2.default.addTrackingMarkerToFunction(testRun.id, fn);


                                testRun.controller = new _testController2.default(testRun);

                                _testRunTracker2.default.ensureEnabled();

                                _context.prev = 4;
                                _context.next = 7;
                                return markeredfn(testRun.controller);

                            case 7:
                                result = _context.sent;
                                _context.next = 13;
                                break;

                            case 10:
                                _context.prev = 10;
                                _context.t0 = _context['catch'](4);
                                throw (0, _processTestFnError2.default)(_context.t0);

                            case 13:

                                // NOTE: check if the last command in the test
                                // function is missing the `await` keyword.
                                testRun.controller._checkForMissingAwait();

                                return _context.abrupt('return', result);

                            case 15:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this, [[4, 10]]);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }();
    };

    TestingUnit._makeAPIListForChildClass = function _makeAPIListForChildClass(ChildClass) {
        ChildClass.API_LIST = TestingUnit.API_LIST.concat((0, _delegatedApi.getDelegatedAPIList)(ChildClass.prototype));
    };

    return TestingUnit;
}();

exports.default = TestingUnit;


TestingUnit.API_LIST = (0, _delegatedApi.getDelegatedAPIList)(TestingUnit.prototype);
module.exports = exports['default'];